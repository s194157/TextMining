library(xgboost)
library(xgboost)
library(xgboost)
dane <- read.table("clipboard", sep = "\t", header = TRUE, dec = ",")
names(dane)
dim(dane)
View(dane)
summary(dane)
if(!require(psych)) install.packages("psych")
library(psych)
describe.by(dane[, -5], dane[, 5])
# Statystylki opisowe atrybutow w podziale na grupy dobrych i złych kredytobiorcow,
# empiryczne rozklady warunkowe względem kategorii zmiennej zależnej
describeby(dane[, -5], dane[, 5])
# Statystylki opisowe atrybutow w podziale na grupy dobrych i złych kredytobiorcow,
# empiryczne rozklady warunkowe względem kategorii zmiennej zależnej
describe.by(dane[, -5], dane[, 5])
describeBy(dane[, -5], dane[, 5])
plot(dane[, -5], col = dane[, 5])
levels(dane[, 5])
if(!require(rpart)) install.packages("rpart")
library(rpart)
if(!require(rpart.plot)) install.packages("rpart.plot")
library(xgboost)
library(xgboost)
library(readr)
library(stringr)
library(caret)
library(car)
describe.By(dane[, -5], dane[, 5])
install.packages("drat", repos="https://cran.rstudio.com")
drat:::addRepo("dmlc")
install.packages("xgboost", repos="http://dmlc.ml/drat/", type = "source")
install.packages("drat", repos="https://cran.rstudio.com")
drat:::addRepo("dmlc")
install.packages("xgboost", repos="http://dmlc.ml/drat/", type = "source")
library(tm)
library(hunspell)
library(stringr)
library(tm)
library(stringr)
workDir <- "C:\\Users\\BartekO\\PJN\\TextMining"
setwd(workDir)
corpus <- VCorpus(
DirSource(
corpusDir,
pattern = "*.txt",
encoding = "UTF-8"
),
readerControl = list(
language = "pl_PL"
)
)
corpusDir <- paste(
inputDir,
"\\",
"Literatura - streszczenia - przetworzone",
sep = ""
)
corpus <- VCorpus(
DirSource(
corpusDir,
pattern = "*.txt",
encoding = "UTF-8"
),
readerControl = list(
language = "pl_PL"
)
)
tdmTfAll <- TermDocumentMatrix(corpus)
dtmTfAll <- DocumentTermMatrix(corpus)
tdmTfidfAll <- TermDocumentMatrix(
corpus,
control = list(
weighting = weightTfIdf()
)
)
tdmBinAll <- TermDocumentMatrix(
corpus,
control = list(
weighting = weightBin()
)
)
#włączenie bibliotek
library(tm)
#zmiana katalogu roboczego
workDir <- "C:\\Users\\BartekO\\PJN\\TextMining"
setwd(workDir)
#definicja katalogów projektu
inputDir <- ".\\data"
outputDir <- ".\\results"
scriptDir <- ".\\scripts"
workspaceDir <- ".\\workspaces"
#utworzenie katalogu wyjściowego
dir.create(outputDir, showWarnings = FALSE)
dir.create(workspaceDir, showWarnings = FALSE)
#uworzenie korspusu dokumentów
corpusDir <- paste(
inputDir,
"\\",
"Literatura - streszczenia - przetworzone",
sep = ""
)
corpus <- VCorpus(
DirSource(
corpusDir,
pattern = "*.txt",
encoding = "UTF-8"
),
readerControl = list(
language = "pl_PL"
)
)
#usunięcie rozszerzeń z nazw dokumentów
cut_exstensions <- function(document){
meta(document, "id") <- gsub(pattern = "\\.txt$", "",meta(document, "id"))
return(document)
}
corpus <- tm_map(corpus, cut_exstensions)
#utworzenie macierzy częstości
tdmTfAll <- TermDocumentMatrix(corpus)
dtmTfAll <- DocumentTermMatrix(corpus)
tdmTfidfAll <- TermDocumentMatrix(
corpus,
control = list(
weighting = weightTfIdf()
)
)
tdmBinAll <- TermDocumentMatrix(
corpus,
control = list(
weighting = weightBin()
)
)
tdmTfBounds <- TermDocumentMatrix(
corpus,
control = list(
bounds = list(
global = c(2,16)
)
)
)
tdmTfidfBounds <- TermDocumentMatrix(
corpus,
control = list(
weighting = weightTfIdf,
bounds = list(
global = c(2,16)
)
)
)
tdmTfidfBounds
tdmTfAllMatrix <- as.matrix(tdmTfAll)
dtmTfAllMatrix <- as.matrix(dtmTfAll)
tdmTfidfAllMatrix <- as.matrix(tdmTfidfAll)
tdmBinAllMatrix <- as.matrix(tdmBinAll)
tdmTfBoundsMatrix <- as.matrix(tdmTfBounds)
tdmTfidfBoundsMatrix <- as.matrix(tdmTfidfBounds)
matrixFile <- paste(
outputDir,
"\\",
"tdmTfidfBounds.csv",
sep=""
)
write.table(tdmTfidfBoundsMatrix, file = matrixFile, sep = ";", dec = ",", col.names = NA)
save.image("C:/Users/BartekO/PJN/TextMining/workspaces/2020_03_31.RData")
#wlaczanie bibliotek
library(tm)
scriptDir <- ".\\scripts"
sourceFile <- paste(
scriptDir,
"\\",
"script_2.R",
sep = ""
)
source(sourceFile)
d <- dist(dtmTfidfBoundsMAtrix)
fit <- cmdscale(d,eig=TRUE, k=2)
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Metric MDS", type="n")
text(x, y, labels = row.names(dtmTfidfBoundsMAtrix), cex=.7)
